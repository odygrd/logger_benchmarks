#include "platformlab_nanolog/include/nanolog/NanoLogCpp17.h"
#include "spdlog/fmt/fmt.h"
#include <atomic>
#include <fstream>
#include <iostream>
#include <string>
#include <thread>
#include <vector>

#include <chrono>
#include <filesystem>
#include <iostream>

#include "utils.h"

static constexpr size_t total_iterations = 4'000'000;

/**
 * The backend worker just spins, so we just measure the total time elapsed for total_iterations
 */
int main()
{
  set_thread_affinity(1);

  std::filesystem::path log_file{"benchmark_nanolog_backend_total_time.blog"};
  std::remove(log_file.c_str());

  NanoLog::setLogFile(log_file.c_str());
  NanoLog::preallocate();

  NANO_LOG(NOTICE, "Warm up");
  NanoLog::sync();

  // start counting the time until backend worker finishes
  auto const start_time = std::chrono::steady_clock::now();
  for (size_t iteration = 0; iteration < total_iterations; ++iteration)
  {
    NANO_LOG(NOTICE, "Iteration: %lu int: %lu double: %f", iteration, iteration * 2,
             static_cast<double>(iteration) / 2);
  }

  NANO_LOG(ERROR, "End");
  NanoLog::sync();

  auto const end_time = std::chrono::steady_clock::now();
  auto const delta = end_time - start_time;

  auto delta_d = std::chrono::duration_cast<std::chrono::duration<double>>(delta).count();

  std::cout << fmt::format(
                 "throughput is {:.2f} million msgs/sec average, total time elapsed: {} ms, log "
                 "file size {:.2f} MB \n",
                 total_iterations / delta_d / 1e6,
                 std::chrono::duration_cast<std::chrono::milliseconds>(delta).count(),
                 static_cast<double>(std::filesystem::file_size(log_file)) / (1024 * 1024))
            << std::endl;

  // Optional: Gather statics generated by NanoLog
  // std::string stats = NanoLog::getStats();
  // printf("%s", stats.c_str());
}